import os
import pathlib
from telebot import TeleBot
from markups import Markup


all_university = ["ВГУ", "ОГУ им. И.С. Тургенева", "ОГИК", "ОГАУ имени Н.В. Парахина", "Борисоглебский Филиал ВГУ",
                  "Карачевский Филиал ОГУ им. И.С. Тургенева", "Ливенский Филиал ОГУ им. И.С. Тургенева",
                  "Мценский Филиал ОГУ им. И.С. Тургенева"]
all_city = ["Воронеж", "Орел", "Карачев", "Борисоглебск", "Ливны", "Мценск", "Орёл"]
university_to_city_dict = {"ВГУ": "Воронеж", "ОГУ им. И.С. Тургенева": "Орёл", "ОГИК": "Орёл",
                           "ОГАУ имени Н.В. Парахина": "Орёл", "Борисоглебский Филиал ВГУ": "Борисоглебск",
                           "Карачевский Филиал ОГУ им. И.С. Тургенева": "Карачев",
                           "Ливенский Филиал ОГУ им. И.С. Тургенева": "Ливны",
                           "Мценский Филиал ОГУ им. И.С. Тургенева": "Мценск"}
university_index = {"1": "Борисоглебский Филиал ВГУ", "2": "ВГУ", "3": "Карачевский Филиал ОГУ им. И.С. Тургенева",
                    "4": "Ливенский Филиал ОГУ им. И.С. Тургенева", "5": "Мценский Филиал ОГУ им. И.С. Тургенева",
                    "6": "ОГАУ имени Н.В. Парахина", "7": "ОГИК", "8": "ОГУ им. И.С. Тургенева"}
format_education_index = {"1": "Очная", "2": "Заочная", "3": "Очно-заочная"}
exams = {"01": "Английский язык",
         "02": "Биология",
         "03": "Биология (естественнонаучный профиль)",
         "04": "Биология (инженерно-технический профиль)",
         "05": "Биология (медицинский профиль)",
         "06": "Биология (социально-гуманитарный профиль)",
         "07": "География",
         "08": "Информатика (инженерно-технический профиль",
         "09": "Информатика и икт",
         "10": "История",
         "11": "История (социально-гуманитарный профиль)",
         "12": "Литература",
         "13": "Литература (социально-гуманитарный профиль)",
         "14": "Математика",
         "15": "Математика (естественнонаучный профиль)",
         "16": "Математика (инженерно-технический профиль)",
         "17": "Математика (социально-гуманитарный профиль)",
         "18": "Немецкий язык",
         "19": "Обществознание",
         "20": "Обществознание (социально-гуманитарный профиль)",
         "21": "Профессиональное испытание (общая физическая подготовка 38.05.02)",
         "22": "Профессиональное испытание (общая физическая подготовка 44.03.01, 49.03.04)",
         "23": "Профессиональное испытание (профессионально-ориентированное испытание)",
         "24": "Профессиональное испытание (рисунок 07.03.01, 07.03.04)",
         "25": "Профессиональное испытание (рисунок 29.03.05, 44.03.01, 54.03.01, 54.03.03)",
         "26": "Профессиональное испытание (рисунок 54.05.02, 54.05.03)",
         "27": "Профессиональное испытание (технология)",
         "28": "Русский язык",
         "29": "Собеседование (профессионально-ориентированное собеседование)",
         "30": "Творческое испытание (творческое сочинение)",
         "31": "Физика",
         "32": "Физика (инженерно-технический профиль)",
         "33": "Французский язык",
         "34": "Химия",
         "35": "Химия (естественнонаучный профиль)",
         "36": "Химия (медицинский профиль)",
         "37": "Биология и химия",
         "38": "Основы биологии",
         "39": "Основы социальных наук",
         "40": "Прикладная информатика",
         "41": "Прикладная информатика, математика и икт",
         "42": "Прикладная физика",
         "43": "Химия в сельском хозяйстве",
         "44": "Строительство",
         "45": "Биотехнология",
         "46": "Продукты питания животного происхождения",
         "47": "Техносферная безопасность",
         "48": "Агрохимия и агропочвоведение",
         "49": "Агрономия - Управление продукционным процессом в современных агро- и фитотехнологиях",
         "50": "Агрономия",
         "51": "Агроинженерия",
         "52": "Ландшафтная архитектура",
         "53": "Зоотехния",
         "54": "Экономика - Бухгалтерский учет, анализ и аудит",
         "55": "Экономика - Финансы и кредит",
         "56": "Менеджмент - Управление человеческими ресурсами",
         "57": "Биоразнообразие и основы экологии",
         "58": "Бухгалтерский учет активов и источников формирования активов организации",
         "59": "Геология",
         "60": "Дизайн",
         "61": "Информатика, алгоритмизация и программирование",
         "62": "Конституционное право",
         "63": "Минералогия",
         "64": "Общая биология",
         "65": "Общая география",
         "66": "Основы математического анализа, логики и теории вероятности",
         "67": "Основы материаловедения",
         "68": "Основы общей физики",
         "69": "Основы педагогики и психология человека",
         "70": "Основы радиофизики и радиотехники",
         "71": "Реклама и связи с общественностью",
         "72": "Теория государства и права",
         "73": "Формирование бухгалтерской (финансовой) отчетности организации",
         "74": "Экология и природопользование"}
directions = {"001": "01.03.01 Математика для анализа больших данных",
              "002": "01.03.02 Прикладная математика и информатика - Компьютерные технологии и анализ данных",
              "003": "01.03.02 Прикладная математика и информатика - Системное программирование и компьютерные технологии",
              "004": "01.03.02 Прикладная математика и информатика - Цифровые технологии в фундаментальных и прикладных исследованиях",
              "005": "01.03.05 Статистика - Математическая статистика и современный анализ данных (data science)",
              "006": "02.03.03 Математическое обеспечение и администрирование информационных систем - Математическое обеспечение интеллектуальных систем",
              "007": "02.03.03 Математическое обеспечение и администрирование информационных систем - Математическое обеспечение информационных систем",
              "008": "03.03.02 Физика - Физика полупроводников",
              "009": "04.03.01 Химия - Аналитическая химия",
              "010": "05.03.02 География - Рекреационная география и туризм",
              "011": "05.03.06 Экология и природопользование - Экология",
              "012": "06.03.01 Биология - Биомедицина",
              "013": "06.03.01 Биология - Генетика",
              "014": "06.03.01 Биология - Зоология",
              "015": "06.03.01 Биология - Микробиология",
              "016": "06.03.01 Биология - Общая Биология",
              "017": "06.03.02 Почвоведение - Управление земельными ресурсами",
              "018": "07.03.01 Архитектура - Архитектурное проектирование",
              "019": "07.03.04 Градостроительство - Градостроительное проектирование",
              "020": "08.03.01 Строительство - Автомобильные дороги и аэродромы",
              "021": "08.03.01 Строительство - Общий профиль",
              "022": "08.03.01 Строительство - Промышленное и гражданское строительство",
              "023": "08.03.01 Строительство - Сметное дело и организация строительного производства",
              "024": "09.03.01 Информатика и вычислительная техника - Вычислительны системы и сети",
              "025": "09.03.02 Информационные системы и технологии - Цифровые технологии в образовании",
              "026": "09.03.03 Прикладная информатика - Интеллектуальная обработка данных",
              "027": "09.03.03 Прикладная информатика - Когнитивные технологии",
              "028": "09.03.03 Прикладная информатика - Цифровые технологии в управлении информацией",
              "029": "09.03.04 Программная инженерия - Индустриальное производство программного обеспечения",
              "030": "10.03.01 Информационная безопасность - Безопасность телекоммуникационных систем",
              "031": "11.03.01 Радиотехника - Радиоэлектронная и информационно-измерительная техника",
              "032": "11.03.02 Инфокоммуникационные технологии и системы связи - Многоканальные системы передачи информации",
              "033": "11.03.03 Конструирование и технология электронных средств - Проектирование и технология радиоэлектронных средств",
              "034": "12.03.01 Приборостроение - Информационно-измерительная техника и технологии",
              "035": "12.03.04 Биотехнические системы и технологии - Биомедицинская техника и технологии",
              "036": "12.03.04 Биотехнические системы и технологии - Сервис высокотехнологичного медицинского оборудования",
              "037": "13.03.02 Электроэнергетика и электротехника - Электрооборудование и электрохозяйство предприятий, организаций и учреждений",
              "038": "13.03.02 Электроэнергетика и электротехника - Энергоэффективность и энергосбережение",
              "039": "15.03.04 Автоматизация технологических процессов и производств - Киберфизические системы",
              "040": "15.03.05 Конструкторско-технологическое обеспечение машиностроительных производств - Технология машиностроения",
              "041": "15.03.06 Мехатроника и робототехника - Мехатроника",
              "042": "19.03.01 Биотехнология - Биофармацевтика и клеточные технологии в медицине",
              "043": "19.03.01 Биотехнология - Промышленная биофармацевтика",
              "044": "19.03.02 Продукты питания из растительного сырья - Технология хлеба, кондитерских и макаронных изделий",
              "045": "19.03.03 Продукты питания животного происхождения - Инновационные технологии производства мясных продуктов и полуфабрикатов",
              "046": "19.03.03 Продукты питания животного происхождения - Прогрессивные технологии производства мясных продуктов и полуфабрикатов",
              "047": "19.03.03 Продукты питания животного происхождения - Технология молока и молочных продуктов",
              "048": "19.03.04 Технология продукции и организация общественного питания - Технология и организация ресторанного дела",
              "049": "20.03.01 Техносферная безопасность - Безопасность жизнедеятельности в техносфере",
              "050": "20.03.01 Техносферная безопасность - Глобальные природные риски и экологическая безопасность",
              "051": "20.03.02 Природообустройство и водопользование - Комплексная безопасность при использовании водных ресурсов",
              "052": "23.03.01 Технология транспортных процессов - Организация перевозок и безопасность дорожного движения",
              "053": "23.03.02 Наземные транспортно-технологические комплексы - Проектирование транспортных средств специального назначения",
              "054": "23.03.03 Эксплуатация транспортно-технологических машин и комплексов - Автомобильная техника в транспортных технологиях",
              "055": "23.03.03 Эксплуатация транспортно-технологических машин и комплексов - Автомобильный сервис",
              "056": "27.03.02 Управление качеством - Управление качеством в производственно-технологических системах",
              "057": "27.03.04 Управление в технических системах - Кибернетические и киберфизические доверенные системы",
              "058": "29.03.05 Конструирование изделий легкой промышленности - Конструирование и технология швейных изделий в индустрии моды",
              "059": "36.03.01 Ветеринарно-санитарная экспертиза - Ветеринарно-санитарная экспертиза производственных предприятий переработки и торговли",
              "060": "37.03.01 Психология - Общий профиль",
              "061": "37.03.01 Психология - Психология",
              "062": "37.03.02 Конфликтология - Психология управления и досудебное разрешение конфликтов",
              "063": "38.03.01 Экономика - Бухгалтерский учет, анализ и аудит",
              "064": "38.03.01 Экономика - Общий системно-экономический",
              "065": "38.03.01 Экономика - Экономика, финансы и бухгалтерский учет",
              "066": "38.03.02 Менеджмент - Менеджмент организации",
              "067": "38.03.02 Менеджмент - Проектный менеджмент",
              "068": "38.03.02 Менеджмент - Управление маркетингом и логистикой",
              "069": "38.03.03 Управление персоналом - Управление персоналом организации",
              "070": "38.03.04 Государственное и муниципальное управление - Технологии государственного и муниципального управления",
              "071": "38.03.05 Бизнес-информатика - Электронный бизнес",
              "072": "38.03.06 Торговое дело - Маркетинг и логистика в цифровой экономике",
              "073": "38.03.06 Торговое дело - Маркетинг",
              "074": "38.03.07 Товароведение - Товароведная оценка качества товаров на этапах товародвижения, хранения и реализации",
              "075": "39.03.01 Социология - Социология социальной сферы",
              "076": "39.03.02 Социальная работа - Социальная работа в системе социальных служб",
              "077": "39.03.03 Организация работы с молодежью - Государственная и муниципальная молодежная политика",
              "078": "40.03.01 Юриспруденция - Международное право и сравнительное правоведение",
              "079": "40.03.01 Юриспруденция - Общий",
              "080": "40.03.01 Юриспруденция - Юриспруденция",
              "081": "41.03.01 Зарубежное регионоведение - Европейские исследования",
              "082": "41.03.04 Политология - Общая и прикладная политология",
              "083": "41.03.04 Политология - Политология и мировая политика",
              "084": "42.03.02 Журналистика - Журналистика",
              "085": "42.03.02 Журналистика - Общий профиль",
              "086": "43.03.01 Сервис - Сервис недвижимости",
              "087": "43.03.01 Сервис - Управление бизнес-процессами в сфере услуг",
              "088": "43.03.02 Туризм - Технологии и организация деятельности предприятий туристской индустрии",
              "089": "43.03.03 Гостиничное дело - Организация деятельности мультифункциональных средств размещения",
              "090": "43.03.03 Гостиничное дело - Технологии и организация деятельности мультифункциональных средств размещения",
              "091": "44.03.01 Педагогическое образование - Изобразительное искусство",
              "092": "44.03.01 Педагогическое образование - История",
              "093": "44.03.01 Педагогическое образование - Начальное образование",
              "094": "44.03.01 Педагогическое образование - Технология",
              "095": "44.03.01 Педагогическое образование - Физическая культура",
              "096": "44.03.02 Психолого-педагогическое образование - Педагогика и психология дошкольного образования",
              "097": "44.03.02 Психолого-педагогическое образование - Практическая психология в образовании",
              "098": "44.03.02 Психолого-педагогическое образование - Психологическое сопровождение образовательного процесса",
              "099": "44.03.02 Психолого-педагогическое образование - Психология и педагогика дошкольного образования",
              "100": "44.03.02 Психолого-педагогическое образование - Психология образования",
              "101": "44.03.02 Психолого-педагогическое образование - Специальная психология и педагогика",
              "102": "44.03.03 Специальное (дефектологическое) образование - Дошкольная дефектология",
              "103": "44.03.03 Специальное (дефектологическое) образование - Логопедия",
              "104": "44.03.04 Профессиональное обучение (по отраслям) - Производство продовольственных продуктов и потребительских товаров",
              "105": "44.03.04 Профессиональное обучение (по отраслям) - Профессиональное обучение",
              "106": "44.03.04 Профессиональное обучение (по отраслям) - Экономика и управление",
              "107": "44.03.05 Педагогическое образование (с двумя профилями подготовки) - Биология и География",
              "108": "44.03.05 Педагогическое образование (с двумя профилями подготовки) - Дошкольное образование и Дополнительное образование",
              "109": "44.03.05 Педагогическое образование (с двумя профилями подготовки) - Дошкольное образование и Начальное образование",
              "110": "44.03.05 Педагогическое образование (с двумя профилями подготовки) - Изобразительное искусство и Дополнительное образование",
              "111": "44.03.05 Педагогическое образование (с двумя профилями подготовки) - Иностранный язык (первый) и Иностранный язык (второй)",
              "112": "44.03.05 Педагогическое образование (с двумя профилями подготовки) - Информатика и Математика",
              "113": "44.03.05 Педагогическое образование (с двумя профилями подготовки) - История и Обществознание",
              "114": "44.03.05 Педагогическое образование (с двумя профилями подготовки) - Математика и Физика",
              "115": "44.03.05 Педагогическое образование (с двумя профилями подготовки) - Начальное образование и Математика",
              "116": "44.03.05 Педагогическое образование (с двумя профилями подготовки) - Начальное образование и Русский язык",
              "117": "44.03.05 Педагогическое образование (с двумя профилями подготовки) - Обществознание и Мировая художественная культура",
              "118": "44.03.05 Педагогическое образование (с двумя профилями подготовки) - Русский язык и Литература",
              "119": "44.03.05 Педагогическое образование (с двумя профилями подготовки) - Технология и Экономика",
              "120": "44.03.05 Педагогическое образование (с двумя профилями подготовки) - Химия и Безопасность жизнедеятельности",
              "121": "45.03.01 Филология - Отечественная филология",
              "122": "45.03.02 Лингвистика - Перевод и переводоведение",
              "123": "45.03.02 Лингвистика - Теория и методика преподавания иностранных языков и культур",
              "124": "46.03.01 История - История международных отношений",
              "125": "47.03.01 Философия - Теоретико-методологический",
              "126": "48.03.01 Теология - Государственно-конфессиональные отношения в истории России и в современном мире",
              "127": "48.03.01 Теология - Православная теология Государственно-конфессиональные отношения в истории России и в современном мире",
              "128": "48.03.01 Теология - Православная теология",
              "129": "49.03.01 Физическая культура - Спортивная подготовка в избранном виде спорта",
              "130": "49.03.01 Физическая культура - Теория и методика спортивной подготовки",
              "131": "49.03.04 Спорт - Спортивная подготовка в избранном виде спорта",
              "132": "50.03.01 Искусства и гуманитарные науки - Теория и история культуры и искусства",
              "133": "51.03.01 Культурология - Управление в социокультурной сфере",
              "134": "51.03.03 Социально-культурная деятельность - Менеджмент социально-культурной деятельности",
              "135": "51.03.04 Музеология и охрана объектов культурного и природного наследия - Культурный туризм и экскурсионная деятельность",
              "136": "54.03.01 Дизайн - Графический дизайн",
              "137": "54.03.01 Дизайн - Дизайн среды",
              "138": "54.03.02 Декоративно-прикладное искусство и народные промыслы - Современные направления в декоративно-прикладном искусстве",
              "139": "54.03.03 Искусство костюма и текстиля - Художественное проектирование костюма",
              "140": "08.05.01 Строительство уникальных зданий и сооружений - Строительство высотных и большепролетных зданий и сооружений",
              "141": "15.05.01 Проектирование технологических машин и комплексов - Проектирование технологических комплексов в машиностроении",
              "142": "23.05.01 Наземные транспортно-технологические средства - Автомобильная техника в транспортных технологиях",
              "143": "23.05.01 Наземные транспортно-технологические средства - Подъемно-транспортные, строительные, дорожные средства и оборудование",
              "144": "23.05.01 Наземн44.05.01 Педагогика и психология девиантного поведения - Психолого-педагогическое сопровождение детей и подростков группы рискаые транспортно-технологические средства - Технические средства природообустройства и защиты в чрезвычайных ситуациях",
              "145": "31.05.01 Лечебное дело - Без профиля",
              "146": "31.05.01 Лечебное дело - Лечебное дело",
              "147": "31.05.02 Педиатрия - Без профиля",
              "148": "31.05.02 Педиатрия - Педиатрия",
              "149": "31.05.03 Стоматология - Без профиля",
              "150": "31.05.03 Стоматология - Стоматология",
              "151": "33.05.01 Фармация - Фармация",
              "152": "36.05.01 Ветеринария - Диагностика, профилактика, лечение и ветеринарная экспертиза всех видов животных",
              "153": "37.05.02 Психология служебной деятельности - Пенитенциарная психология",
              "154": "38.05.01 Экономическая безопасность - Экономико-правовое обеспечение экономической безопасности на макро- и микроуровнях",
              "155": "38.05.01 Экономическая безопасность - Экономико-правовое обеспечение экономической безопасности",
              "156": "38.05.02 Таможенное дело - Товароведение и таможенная экспертиза товаров",
              "157": "40.05.01 Правовое обеспечение национальной безопасности - Государственно-правовая",
              "158": "44.05.01 Педагогика и психология девиантного поведения - Психолого-педагогическое сопровождение детей и подростков группы риска",
              "159": "44.05.01 Педагогика и психология девиантного поведения - Психолого-педагогическая профилактика девиантного поведения несовершеннолетних",
              "161": "54.05.02 Живопись - Художник-живописец (станковая живопись)",
              "162": "54.05.03 Графика - Художник - график (станковая графика)",
              "163": "54.05.04 Скульптура - Художник-скульптор (станковая скульптура)",
              "164": "08.03.01 Строительство - Автомобильные дороги",
              "165": "08.03.01 Строительство - Жилищно-коммунальный комплекс",
              "166": "08.03.01 Строительство - Промышленное и гражданское строительство",
              "167": "08.03.01 Строительство - Экспертиза и управление недвижимостью",
              "168": "13.03.02 Электроэнергетика и электротехника - Электроснабжение",
              "169": "19.03.01 Биотехнология - Биотехнология",
              "170": "19.03.03 Продукты питания животного происхождения - Продукты питания животного происхождения",
              "171": "20.03.01 Техносферная безопасность - Безопасность технологических процессов и производств",
              "172": "20.03.01 Техносферная безопасность - Техносферная безопасность",
              "173": "23.03.03 Эксплуатация транспортно-технологических машин и комплексов - Автомобили и автомобильное хозяйство",
              "174": "35.03.03. Агрохимия и агропочвоведение - Агроэкология",
              "175": "35.03.03. Агрохимия и агропочвоведение - Экозащита и экоаналитика",
              "176": "35.03.04. Агрономия - Агробизнес",
              "177": "35.03.04. Агрономия - Агроконсультирование",
              "178": "35.03.06 Агроинженерия - Логистика в АПК",
              "179": "35.03.06 Агроинженерия - Технические системы в агробизнесе",
              "180": "35.03.06 Агроинженерия - Технический сервис в агропромышленном комплексе",
              "181": "35.03.06 Агроинженерия - Электрооборудование и электротехнология",
              "182": "35.03.07 Технология производства и переработки сельскохозяйственной продукции - Технология хранения и переработки зерна",
              "183": "35.03.10 Ландшафтная архитектура - Ландшафтная архитектура",
              "184": "35.03.10 Ландшафтная архитектура - Ландшафтное строительство",
              "185": "36.03.02 Зоотехния - Зоотехния",
              "186": "36.03.02 Зоотехния - Продуктивное и непродуктивное животноводства с основами цифровых технологий",
              "187": "36.03.02 Зоотехния - Технология производства продуктов животноводства",
              "188": "38.03.01 Экономика - Бухгалтерский учёт, анализ и аудит",
              "189": "38.03.01 Экономика - Финансы и кредит",
              "190": "38.03.02 Менеджмент - Менеджмент организации",
              "191": "23.05.01 Наземные транспортно-технологические средства - Автомобильная техника в транспортных технологиях",
              "192": "36.05.01 Ветеринария - Ветеринария",
              "193": "01.03.01 Математика - Дифференциальные уравнения",
              "194": "01.03.01 Математика - Математическая модель",
              "195": "01.03.02 Прикладная математика и информатика - Динамические системы",
              "196": "01.03.02 Прикладная математика и информатика - Информационная аналитика и обработка больших данных",
              "197": "01.03.02 Прикладная математика и информатика - Информационные технологии для вычислительных систем",
              "198": "01.03.02 Прикладная математика и информатика - Математические и компьютерные методы в прикладной разработке",
              "199": "01.03.02 Прикладная математика и информатика - Технологии разработки ПО и компьютерная обработка данных",
              "200": "01.03.03 Механика и математическое моделирование - Компьютерный инжиниринг в механике сплошных сред",
              "201": "01.03.04 Прикладная математика - Применение математических методов к решению инженерных и экономических задач",
              "202": "02.03.01 Математика и компьютерные науки - Квантовая теория информации",
              "203": "02.03.01 Математика и компьютерные науки - Распределенные системы и искусственный интеллект",
              "204": "02.03.01 Математика и компьютерные науки - Математическое и компьютерное моделирование",
              "205": "02.03.01 Математика и компьютерные науки - Математические методы и компьютерные технологии в естествознании, экономике и управлении",
              "206": "02.03.02 Фундаментальная информатика и информационные технологии - Инженерия программного обеспечения",
              "207": "02.03.03 Математическое обеспечение и администрирование информационных систем - Проектирование и разработка информационных систем",
              "208": "03.03.02 Физика - Физика твердого тела",
              "209": "03.03.02 Физика - Физика лазерных и спектральных технологий",
              "210": "03.03.03 Радиофизика - Радиофизика и электроника",
              "211": "04.03.01 Химия - Прикладная химия",
              "212": "04.03.01 Химия - Теоретическая и экспериментальная химия",
              "213": "04.03.02 Химия, физика и механика материалов - Материаловедение и индустрия наносистем",
              "214": "05.03.01 Геология - Геологическая съемка и поиски твердых полезных ископаемых",
              "215": "05.03.01 Геология - Геофизические методы поисков и разведки минеральных ресурсов",
              "216": "05.03.01 Геология - Поиски, разведка подземных вод и инженерно-геологические изыскания",
              "217": "05.03.01 Геология - Экологическая безопасность недропользования",
              "218": "05.03.02 География - Ландшафтные исследования территориальных систем",
              "219": "05.03.02 География - Экономическая и социальная география",
              "220": "05.03.06 Экология и природопользование - Геоэкология",
              "221": "05.03.06 Экология и природопользование - Природопользование и охрана водных ресурсов",
              "222": "05.03.06 Экология и природопользование - Охрана окружающей среды",
              "223": "06.03.01 Биология - Биофизика",
              "224": "06.03.01 Биология - Биохимия",
              "225": "06.03.01 Биология - Ботаника",
              "226": "06.03.01 Биология - Физиология",
              "227": "09.03.01 Информатика и вычислительная техника - Вычислительные машины, комплексы, системы и сети",
              "228": "09.03.02 Информационные системы и технологии - Встраиваемые вычислительные системы и интернет вещей",
              "229": "09.03.02 Информационные системы и технологии - Информационные системы в телекоммуникациях",
              "230": "09.03.02 Информационные системы и технологии - Информационные системы и технологии в управлении предприятием",
              "231": "09.03.02 Информационные системы и технологии - Обработка информации и машинное обучение",
              "232": "09.03.02 Информационные системы и технологии - Программная инженерия в информационных системах",
              "233": "09.03.03 Прикладная информатика - Прикладная информатика в юриспруденции",
              "234": "09.03.03 Прикладная информатика - Прикладная информатика в экономике",
              "235": "09.03.04 Программная инженерия - Информационные системы и сетевые технологии",
              "236": "10.03.01 Информационная безопасность - Безопасность компьютерных систем",
              "237": "11.03.04 Электроника и наноэлектроника - Интегральная электроника и наноэлектроника",
              "238": "12.03.03 Фотоника и оптоинформатика - Фотоника и оптоинформатика",
              "239": "14.03.02 Ядерные физика и технологии - Физика атомного ядра и частиц",
              "240": "38.03.01 Экономика - Коммерческая деятельность и бизнес-риски",
              "241": "38.03.01 Экономика - Модели и методы анализа цифровой экономики",
              "242": "38.03.01 Экономика - Мировая экономика",
              "243": "38.03.01 Экономика - Учет и отчетность организаций",
              "244": "38.03.01 Экономика - Экономический анализ и аудит",
              "245": "38.03.01 Экономика - Экономика предприятий и организаций",
              "246": "38.03.01 Экономика - Экономика рынков",
              "247": "38.03.01 Экономика - Экономика социально-трудовых отношений",
              "248": "38.03.02 Менеджмент - Менеджмент организаций",
              "249": "38.03.02 Менеджмент - Управление закупками и цепями поставок",
              "250": "38.03.02 Менеджмент - Управление бизнесом",
              "251": "38.03.05 Бизнес-информатика - Бизнес-аналитика и системы автоматизации предприятий",
              "252": "39.03.01 Социология - Организация и проведение социологических исследований",
              "253": "40.03.01 Юриспруденция - Государственное право",
              "254": "40.03.01 Юриспруденция - Гражданское право",
              "255": "40.03.01 Юриспруденция - Международное право",
              "256": "40.03.01 Юриспруденция - Уголовное право",
              "257": "41.03.04 Политология - Публичное управление и политический менеджмент",
              "258": "41.03.05 Международные отношения - Международная интеграция и международные организации",
              "259": "41.03.05 Международные отношения - Мировая политика",
              "260": "42.03.01 Реклама и связи с общественностью - Реклама и связи с общественностью в средствах массовой информации",
              "261": "42.03.02 Журналистика - Пресса и интернет",
              "262": "42.03.03 Издательское дело - Редактирование и дизайн средств информации",
              "263": "42.03.04 Телевидение - Теледокументалистика",
              "264": "42.03.05 Медиакоммуникации - Работа с контентом в массмедиа",
              "265": "43.03.02 Туризм - Технологии и организация туроператорских и турагентских услуг",
              "266": "45.03.01 Филология - Педагогическое образование. Филологические исследования",
              "267": "45.03.01 Филология - Педагогическое образование. Филологические исследования для иностранных студентов",
              "268": "45.03.02 Лингвистика - Теория и методика преподавания иностранных языков и культур (английский язык)",
              "269": "45.03.02 Лингвистика - Теория и методика преподавания иностранных языков и культур (испанский язык)",
              "270": "45.03.02 Лингвистика - Теория и методика преподавания иностранных языков и культур (немецкий язык)",
              "271": "45.03.02 Лингвистика - Теория и методика преподавания иностранных языков и культур (французский язык)",
              "272": "45.03.02 Лингвистика - Теория и практика межкультурной коммуникации",
              "273": "45.03.03 Фундаментальная и прикладная лингвистика - Экспертно-аналитическая деятельность",
              "274": "46.03.01 История - Историческое образование и исследовательская деятельность",
              "275": "50.03.01 Искусства и гуманитарные науки - Дизайн",
              "276": "51.03.06 Библиотечно-информационная деятельность - Библиотечно-информационное обеспечение социокультурной деятельности",
              "277": "58.03.01 Востоковедение и африканистика - Востоковедные исследования",
              "278": "01.05.01 Фундаментальные математика и механика - Современные методы теории функций в математике и механике",
              "279": "04.05.01 Фундаментальная и прикладная химия - Фундаментальная химия в профессиональном образовании",
              "280": "10.05.01 Компьютерная безопасность - Математические методы защиты информации",
              "281": "10.05.01 Компьютерная безопасность - Анализ безопасности компьютерных систем",
              "282": "10.05.04 Информационно-аналитические системы безопасности - Автоматизация информационно-аналитической деятельности",
              "283": "10.05.04 Информационно-аналитические системы безопасности - Информационная безопасность финансовых и экономических структур",
              "284": "14.05.02 Атомные станции. Проектирование, эксплуатация и инжиниринг - Проектирование и эксплуатация атомных станций",
              "285": "30.05.01 Медицинская биохимия - Медицинская биохимия",
              "286": "30.05.02 Медицинская биофизика - Медицинская биофизика",
              "287": "30.05.03 Медицинская кибернетика - Медицинская кибернетика",
              "288": "40.05.04 Судебная и прокурорская деятельность - Прокурорская деятельность",
              "289": "45.05.01 Перевод и переводоведение - Перевод и переводоведение. Английский и испанский языки",
              "290": "45.05.01 Перевод и переводоведение - Перевод и переводоведение. Английский и немецкий языки",
              "291": "45.05.01 Перевод и переводоведение - Перевод и переводоведение. Английский и французский языки",
              "292": "45.05.01 Перевод и переводоведение - Перевод и переводоведение. Итальянский и английский языки",
              "293": "45.05.01 Перевод и переводоведение - Перевод и переводоведение. Немецкий и английский языки",
              "294": "45.05.01 Перевод и переводоведение - Перевод и переводоведение. Французский и английский языки",
              "295": "56.05.05 Военная журналистика - Военно-профессиональная деятельность",
              "296": "56.05.05 Военная журналистика - Военная журналистика"}


def is_correct_direction(message):
    text = message.text
    for symbol in text:
        if not symbol.isdigit():
            return False
    if len(text) != 5:
        return False
    university_code = text[0]
    if university_code not in list(university_index.keys()):
        return False
    format_education_code = text[1]
    if format_education_code not in list(format_education_index.keys()):
        return False
    directio_code = text[2:]
    if directio_code not in list(directions.keys()):
        return False
    return True


def is_correct_exam(message):
    text = message.text
    if not (text.startswith("E-") or text.startswith("Е-")):
        return False
    for symbol in text[2:]:
        if not symbol.isdigit():
            return False
    exam_code = text[3:]
    if exam_code not in list(exams.keys()):
        return False
    return True


def run_bot(token):
    bot = TeleBot(token)

# Приветствие и выбор города (Воронеж, Орёл, Борисоглебск, Мценск, Ливны, Карачев)======================================

    @bot.message_handler(commands=["start"])
    def start(message):
        path_to_txt = pathlib.Path("messages", "Приветствие.txt")
        with open(path_to_txt, "r", encoding="utf-8") as file:
            text = file.read()
        bot.send_message(chat_id=message.chat.id, text=text)
        path_to_txt = pathlib.Path("messages", "Города.txt")
        with open(path_to_txt, "r", encoding="utf-8") as file:
            text = file.read()
        bot.send_message(chat_id=message.chat.id, text=text, reply_markup=Markup().cities_markup())

    @bot.message_handler(func=lambda mess: True if mess.text == "/start" or
                         mess.text == "Выбрать другой город" else False)
    def choose_cities(message):
        path_to_txt = pathlib.Path("messages", "Города.txt")
        with open(path_to_txt, "r", encoding="utf-8") as file:
            text = file.read()
        bot.send_message(chat_id=message.chat.id, text=text, reply_markup=Markup().cities_markup())

# Выбор университетов===================================================================================================

    @bot.message_handler(func=lambda mess: True if mess.text in all_city else False)
    def choose_university(message):
        city = message.text
        path_to_txt = pathlib.Path("data", f"{city}", "Университеты.txt")
        with open(path_to_txt, "r", encoding="utf-8") as file:
            text = file.read()
        bot.send_message(chat_id=message.chat.id, text=text, reply_markup=Markup().universities_markup(city=city))

    @bot.message_handler(func=lambda mess: True if "Все университеты в городе" in mess.text else False)
    def choose_university_again(message):
        try:
            city = message.text.replace("Все университеты в городе ", "")
            path_to_txt = pathlib.Path("data", f"{city}", "Университеты Повтор.txt")
            with open(path_to_txt, "r", encoding="utf-8") as file:
                text = file.read()
            bot.send_message(chat_id=message.chat.id, text=text, reply_markup=Markup().universities_markup(city=city))
        except Exception as ex:
            bot.send_message(chat_id=message.chat.id,
                             text="Прости, но я тебя не понимаю.\nВозможно ты ввел что-то не то...")

# Выбор секции университета=============================================================================================

    @bot.message_handler(func=lambda mess: True if mess.text in all_university else False)
    def choose_section_university(message):
        university = message.text
        city = university_to_city_dict[university]
        path_to_photo = pathlib.Path("data", f"{city}", f"{university}", f"main_photo.jpg")
        with open(path_to_photo, "rb") as file:
            photo = file.read()
        bot.send_photo(chat_id=message.chat.id, photo=photo, caption=university)
        bot.send_message(chat_id=message.chat.id, text=f"Что тебе рассказать об этом университете?",
                         reply_markup=Markup().sections_university_markup(university=university, city=city))

    @bot.message_handler(func=lambda mess: True if "Все разделы" in mess.text else False)
    def choose_section_university_again(message):
        university = message.text.replace("Все разделы ", "")
        city = university_to_city_dict[university]
        bot.send_message(chat_id=message.chat.id, text=f"Что тебе рассказать об университете?",
                         reply_markup=Markup().sections_university_markup(university=university, city=city))

# Выбор формата обучения================================================================================================

    @bot.message_handler(func=lambda mess: True if "Направления" in mess.text else False)
    def choose_section_direction(message):
        try:
            university = message.text.replace("Направления ", "")
            if university != "Борисоглебский Филиал ВГУ":
                text = f"Выберете формат обучения"
                bot.send_message(chat_id=message.chat.id, text=text,
                                 reply_markup=Markup.choose_education_format(university=university))
            else:
                path = pathlib.Path("data", "Борисоглебск", "Борисоглебский Филиал ВГУ", "Направления.png")
                with open(path, "rb") as file:
                    content = file.read()
                bot.send_photo(chat_id=message.chat.id, photo=content, caption="Направления в Борисоглебском Филиале ВГУ")
        except Exception as ex:
            bot.send_message(chat_id=message.chat.id,
                             text="Прости, но я тебя не понимаю.\nВозможно ты ввел что-то не то...")

# Выбор направления университета========================================================================================

    @bot.message_handler(func=lambda mess: True if "форма обучения в" in mess.text else False)
    def choose_education_format(message):
        try:
            education_format = message.text.split(" ")[0]
            university = message.text.replace(f"{education_format} форма обучения в ", "")
            city = university_to_city_dict[university]
            path = pathlib.Path("data", f"{city}", f"{university}", "Направления", f"{education_format}", "Направления.txt")
            with open(path, "rb") as file:
                text = file.read()
            bot.send_message(chat_id=message.chat.id, text="Отправляю документ...")
            bot.send_document(chat_id=message.chat.id, document=text,
                              visible_file_name=f"Направления {education_format} форма обучения {university}.txt")
        except Exception as ex:
            bot.send_message(chat_id=message.chat.id,
                             text="Прости, но я тебя не понимаю.\nВозможно ты ввел что-то не то...")

# Информация о направлении==============================================================================================

    @bot.message_handler(func=is_correct_direction)
    def choose_direction(message):
        try:
            university = university_index[message.text[0]]
            bot.send_message(chat_id=message.chat.id, text="Что вам рассказать об этом направлении? ",
                             reply_markup=Markup().sections_direction_markup(university=university,
                                                                             direction_code=message.text))
        except Exception as ex:
            bot.send_message(chat_id=message.chat.id,
                             text="Прости, но я тебя не понимаю.\nВозможно ты ввел что-то не то...")

    @bot.message_handler(func=lambda mess: True if mess.text == "Учебный план в ОГИК" else False)
    def education_plan_ogik(message):
        path = pathlib.Path('data', "Орёл", "ОГИК", "Учебный План", "Заочная форма обучения.pdf")
        with open(path, 'rb') as file:
            content = file.read()
        bot.send_message(chat_id=message.chat.id, text="Отправляю документ...")
        bot.send_document(chat_id=message.chat.id, document=content,
                          visible_file_name="Учебный План на заочной форме обучения в ОГИК.pdf")
        path = pathlib.Path('data', "Орёл", "ОГИК", "Учебный План", "Очная форма обучения.pdf")
        with open(path, 'rb') as file:
            content = file.read()
        bot.send_message(chat_id=message.chat.id, text="Отправляю документ...")
        bot.send_document(chat_id=message.chat.id, document=content,
                          visible_file_name="Учебный План на очной форме обучения в ОГИК.pdf")

    @bot.message_handler(func=lambda mess: True if "Учебный план" in mess.text else False)
    def education_plan(message):
        try:
            code = message.text.replace("Учебный план ", "")
            university = university_index[code[0]]
            education_format = format_education_index[code[1]]
            direction = directions[code[2:]]
            if university == "ОГУ им. И.С. Тургенева":
                path = pathlib.Path("data", "Орёл", "ОГУ им. И.С. Тургенева", "Направления", f"{education_format}",
                                    f"{direction}", "Учебный План.pdf")
                with open(path, "rb") as file:
                    content = file.read()
                bot.send_message(chat_id=message.chat.id, text="Отправляю документ...")
                bot.send_document(chat_id=message.chat.id, document=content,
                                  visible_file_name=f"{direction} - Учебный План.pdf")
            elif university in ["Мценский Филиал ОГУ им. И.С. Тургенева", "Ливенский Филиал ОГУ им. И.С. Тургенева",
                                "Карачевский Филиал ОГУ им. И.С. Тургенева"]:
                if education_format != "Заочная":
                    path = pathlib.Path("data", "Мценск", "Мценский Филиал ОГУ им. И.С. Тургенева", "Направления",
                                        f"{education_format}", f"{direction}", "Учебный План.pdf")
                    with open(path, "rb") as file:
                        content = file.read()
                    bot.send_message(chat_id=message.chat.id, text="Отправляю документ...")
                    bot.send_document(chat_id=message.chat.id, document=content,
                                      visible_file_name=f"{direction} - Учебный План.pdf")
                else:
                    bot.send_message(chat_id=message.chat.id,
                                     text="Прости, но я тебя не понимаю.\nВозможно ты ввел что-то не то...")
            elif university == "ОГАУ имени Н.В. Парахина":
                path = pathlib.Path("data", "Орёл", "ОГАУ имени Н.В. Парахина", "Направления", f"{education_format}",
                                    f"{direction}", "Учебный План.pdf")
                with open(path, "rb") as file:
                    content = file.read()
                bot.send_message(chat_id=message.chat.id, text="Отправляю документ...")
                bot.send_document(chat_id=message.chat.id, document=content,
                                  visible_file_name=f"{direction} - Учебный План.pdf")
            elif university == "ВГУ":
                path = pathlib.Path("data", "Воронеж", "ВГУ", "Направления", f"{education_format}",
                                    f"{direction}", "Учебный План.pdf")
                with open(path, "rb") as file:
                    content = file.read()
                bot.send_message(chat_id=message.chat.id, text="Отправляю документ...")
                bot.send_document(chat_id=message.chat.id, document=content,
                                  visible_file_name=f"{direction} - Учебный План.pdf")
            else:
                bot.send_message(chat_id=message.chat.id,
                                 text="Прости, но я тебя не понимаю.\nВозможно ты ввел что-то не то...")
        except Exception as ex:
            bot.send_message(chat_id=message.chat.id,
                             text="Прости, но я тебя не понимаю.\nВозможно ты ввел что-то не то...")

    @bot.message_handler(func=lambda mess: True if "Списки зачисленных на" in mess.text else False)
    def successful_list_continue(message):
        try:
            university = message.text.replace("Списки зачисленных на бюджет в ",
                                              "").replace("Списки зачисленных на платное обучение в ", "")
            if university == "ОГАУ имени Н.В. Парахина":
                if "бюджет" in message.text:
                    education_format = "Бюджет"
                else:
                    education_format = "Платное обучение"
                path = pathlib.Path("data", "Орёл", "ОГАУ имени Н.В. Парахина", "Списки зачисленных",
                                    f"Списки зачисленных - {education_format}.pdf")
                with open(path, "rb") as file:
                    content = file.read()
                bot.send_message(chat_id=message.chat.id, text="Отправляю документ...")
                bot.send_document(chat_id=message.chat.id, document=content,
                                  visible_file_name=f"Списки зачисленных - {education_format}.pdf")
        except Exception as ex:
            bot.send_message(chat_id=message.chat.id,
                             text="Прости, но я тебя не понимаю.\nВозможно ты ввел что-то не то...")

    @bot.message_handler(func=lambda mess: True if "Списки зачисленных" in mess.text else False)
    def successful_list(message):
        try:
            has_code = message.text.replace("Списки зачисленных", "").strip().isdigit()
            if has_code:
                code = message.text.replace("Списки зачисленных ", "")
                university = university_index[code[0]]
                education_format = format_education_index[code[1]]
                direction = directions[code[2:]]
                city = university_to_city_dict[university]
                path = pathlib.Path("data", city, university, "Направления", f"{education_format}", f"{direction}")
                if "Списки зачисленных.txt" in os.listdir(path):
                    path = pathlib.Path(path, "Списки зачисленных.txt")
                    with open(path, "r", encoding="utf-8") as file:
                        text = file.read()
                    text = f"Проверить актуальные списки поступивших можно по ссылке ниже\n\n{text}"
                    bot.send_message(chat_id=message.chat.id, text=text)
                else:
                    bot.send_message(chat_id=message.chat.id, text="На данный момент нет данных")
            else:
                university = message.text.replace("Списки зачисленных в ", "")
                if university == "ОГАУ имени Н.В. Парахина":
                    bot.send_message(chat_id=message.chat.id, text="Выбери формат стоимости обучения",
                                     reply_markup=Markup.choose_education_price_format(university=university))
                else:
                    city = university_to_city_dict[university]
                    path = pathlib.Path("data", city, university, "Списки зачисленных.pdf")
                    with open(path, "rb") as file:
                        content = file.read()
                    bot.send_message(chat_id=message.chat.id, text="Отправляю документ...")
                    bot.send_document(chat_id=message.chat.id, document=content,
                                      visible_file_name="Списки зачисленных.pdf")
        except Exception as ex:
            bot.send_message(chat_id=message.chat.id,
                             text="Прости, но я тебя не понимаю.\nВозможно ты ввел что-то не то...")

# Информация об университете============================================================================================

    @bot.message_handler(func=lambda mess: True if "Общежития" in mess.text else False)
    def university_hostel(message):
        try:
            university = message.text.replace("Общежития в ", "")
            city = university_to_city_dict[university]
            if university in ["ОГУ им. И.С. Тургенева", "Мценский Филиал ОГУ им. И.С. Тургенева",
                              "Ливенский Филиал ОГУ им. И.С. Тургенева", "Карачевский Филиал ОГУ им. И.С. Тургенева"]:
                bot.send_message(chat_id=message.chat.id, text="Отправляю 2 документа...")
                path = pathlib.Path("data", city, university, "Общежития", "Адреса общежитий ОГУ.pdf")
                with open(path, "rb") as file:
                    address = file.read()
                bot.send_document(chat_id=message.chat.id, document=address, visible_file_name="Адреса общежитий ОГУ.pdf")
                path = pathlib.Path("data", city, university, "Общежития", "Наличие общежитий в ОГУ.pdf")
                with open(path, "rb") as file:
                    info = file.read()
                bot.send_document(chat_id=message.chat.id, document=info, visible_file_name="Наличие общежитий в ОГУ.pdf")
            elif university == "ОГАУ имени Н.В. Парахина":
                path = pathlib.Path("data", "Орёл", "ОГАУ имени Н.В. Парахина", "Общежития.xlsx")
                with open(path, "rb") as file:
                    content = file.read()
                bot.send_message(chat_id=message.chat.id, text="Отправляю документ...")
                bot.send_document(chat_id=message.chat.id, document=content,
                                  visible_file_name="Общежития в ОГАУ имени Н.В. Парахина.xlsx")
            elif university in ["Борисоглебский Филиал ВГУ", "ВГУ"]:
                path = pathlib.Path("data", city, university, "Общежития.pdf")
                with open(path, "rb") as file:
                    content = file.read()
                bot.send_message(chat_id=message.chat.id, text="Отправляю документ...")
                bot.send_document(chat_id=message.chat.id, document=content, visible_file_name="Общежития.pdf")
            elif university == "ОГИК":
                path = pathlib.Path("data", city, university, "Общежития.txt")
                with open(path, "rb") as file:
                    content = file.read()
                bot.send_message(chat_id=message.chat.id, text="Отправляю документ...")
                bot.send_document(chat_id=message.chat.id, document=content, visible_file_name="Общежития.txt")
        except Exception as ex:
            bot.send_message(chat_id=message.chat.id,
                             text="Прости, но я тебя не понимаю.\nВозможно ты ввел что-то не то...")

    @bot.message_handler(func=lambda mess: True if "Приемная комиссия" in mess.text else False)
    def admission_committee(message):
        try:
            university = message.text.replace("Приемная комиссия ", "")
            city = university_to_city_dict[university]
            path = pathlib.Path("data", city, university, "Приемная комиссия.txt")
            with open(path, "r", encoding="utf-8") as file:
                info = file.read()
            bot.send_message(chat_id=message.chat.id, text=info)
        except Exception as ex:
            bot.send_message(chat_id=message.chat.id,
                             text="Прости, но я тебя не понимаю.\nВозможно ты ввел что-то не то...")

    @bot.message_handler(func=lambda mess: True if "Документы для поступления в" in mess.text else False)
    def document_to_entrance(message):
        try:
            university = message.text.replace("Документы для поступления в ", "")
            city = university_to_city_dict[university]
            if university in ["ОГУ им. И.С. Тургенева", "Мценский Филиал ОГУ им. И.С. Тургенева",
                              "Ливенский Филиал ОГУ им. И.С. Тургенева", "Карачевский Филиал ОГУ им. И.С. Тургенева"]:
                path = pathlib.Path("data", city, university, "Документы для поступления", "Документы для поступления.txt")
                with open(path, "r", encoding="utf-8") as file:
                    info = file.read()
                bot.send_message(chat_id=message.chat.id, text=info)
                path = pathlib.Path("data", city, university, "Документы для поступления", "Заявление для поступления.pdf")
                with open(path, "rb") as file:
                    document = file.read()
                bot.send_message(chat_id=message.chat.id, text="Отправляю документ...")
                bot.send_document(chat_id=message.chat.id, document=document, visible_file_name="Заявление для поступления.pdf")
            elif university in ["ОГАУ имени Н.В. Парахина", "ВГУ", "Борисоглебский Филиал ВГУ", "ОГИК"]:
                path = pathlib.Path("data", city, university, "Документы для поступления.txt")
                with open(path, "r", encoding="utf-8") as file:
                    content = file.read()
                bot.send_message(chat_id=message.chat.id, text=content)
        except Exception as ex:
            bot.send_message(chat_id=message.chat.id,
                             text="Прости, но я тебя не понимаю.\nВозможно ты ввел что-то не то...")

    @bot.message_handler(func=lambda mess: True if "Баллы для поступления в" in mess.text else False)
    def points_to_entrance(message):
        try:
            university = message.text.replace("Баллы для поступления в ", "")
            city = university_to_city_dict[university]
            if university in ["ОГУ им. И.С. Тургенева", "Мценский Филиал ОГУ им. И.С. Тургенева",
                              "Ливенский Филиал ОГУ им. И.С. Тургенева", "Карачевский Филиал ОГУ им. И.С. Тургенева"]:
                path = pathlib.Path("data", city, university, "Баллы для поступления.pdf")
                with open(path, "rb") as file:
                    content = file.read()
                bot.send_message(chat_id=message.chat.id, text="Отправляю документ...")
                bot.send_document(chat_id=message.chat.id, document=content,
                                  visible_file_name=f"Баллы для поступления в {university}.pdf")
            elif university in ["ОГАУ имени Н.В. Парахина", "ОГИК"]:
                path = pathlib.Path("data", city, university, "Баллы для поступления.xlsx")
                with open(path, "rb") as file:
                    content = file.read()
                bot.send_message(chat_id=message.chat.id, text="Отправляю документ...")
                bot.send_document(chat_id=message.chat.id, document=content,
                                  visible_file_name=f"Баллы для поступления в {university}.xlsx")
            elif university in ["ВГУ", "Борисоглебский Филиал ВГУ"]:
                path = pathlib.Path("data", city, university, "Баллы для поступления.pdf")
                with open(path, "rb") as file:
                    content = file.read()
                bot.send_message(chat_id=message.chat.id, text="Отправляю документ...")
                bot.send_document(chat_id=message.chat.id, document=content,
                                  visible_file_name=f"Баллы для поступления в {university}.pdf")
            else:
                bot.send_message(chat_id=message.chat.id,
                                 text="Прости, но я тебя не понимаю.\nВозможно ты ввел что-то не то...")
        except Exception as ex:
            bot.send_message(chat_id=message.chat.id,
                             text="Прости, но я тебя не понимаю.\nВозможно ты ввел что-то не то...")

    @bot.message_handler(func=lambda mess: True if "Количество бюджетных мест в" in mess.text else False)
    def amount_free_places(message):
        try:
            university = message.text.replace("Количество бюджетных мест в ", "")
            city = university_to_city_dict[university]
            if university in ["ОГУ им. И.С. Тургенева", "Мценский Филиал ОГУ им. И.С. Тургенева",
                              "Ливенский Филиал ОГУ им. И.С. Тургенева", "Карачевский Филиал ОГУ им. И.С. Тургенева"]:
                path = pathlib.Path("data", city, university, "Количество бюджетных мест.pdf")
                with open(path, "rb") as file:
                    content = file.read()
                bot.send_message(chat_id=message.chat.id, text="Отправляю документ...")
                bot.send_document(chat_id=message.chat.id, document=content,
                                  visible_file_name=f"Количество бюджетных мест в {university}.pdf")
            elif university == "ОГАУ имени Н.В. Парахина":
                path = pathlib.Path("data", "Орёл", "ОГАУ имени Н.В. Парахина", "Количество бюджетных мест.xlsx")
                with open(path, "rb") as file:
                    content = file.read()
                bot.send_message(chat_id=message.chat.id, text="Отправляю документ...")
                bot.send_document(chat_id=message.chat.id, document=content,
                                  visible_file_name=f"Количество бюджетных мест в {university}.xlsx")
            elif university in ["ВГУ", "Борисоглебский Филиал ВГУ", "ОГИК"]:
                path = pathlib.Path("data", city, university, "Количество бюджетных мест.pdf")
                with open(path, "rb") as file:
                    content = file.read()
                bot.send_message(chat_id=message.chat.id, text="Отправляю документ...")
                bot.send_document(chat_id=message.chat.id, document=content,
                                  visible_file_name=f"Количество бюджетных мест в {university}.pdf")
        except Exception as ex:
            bot.send_message(chat_id=message.chat.id,
                             text="Прости, но я тебя не понимаю.\nВозможно ты ввел что-то не то...")

    @bot.message_handler(func=lambda mess: True if "Стоимость образования в" in mess.text else False)
    def price(message):
        try:
            university = message.text.replace("Стоимость образования в ", "")
            city = university_to_city_dict[university]
            if university in ["ОГУ им. И.С. Тургенева", "Мценский Филиал ОГУ им. И.С. Тургенева",
                              "Ливенский Филиал ОГУ им. И.С. Тургенева", "Карачевский Филиал ОГУ им. И.С. Тургенева"]:
                path = pathlib.Path("data", city, university, "Стоимость образования.pdf")
                with open(path, "rb") as file:
                    content = file.read()
                bot.send_message(chat_id=message.chat.id, text="Отправляю документ...")
                bot.send_document(chat_id=message.chat.id, document=content,
                                  visible_file_name=f"Стоимость образования в {university}.pdf")
            elif university == "ОГАУ имени Н.В. Парахина":
                path = pathlib.Path("data", "Орёл", "ОГАУ имени Н.В. Парахина", "Стоимость образования.xlsx")
                with open(path, "rb") as file:
                    content = file.read()
                bot.send_message(chat_id=message.chat.id, text="Отправляю документ...")
                bot.send_document(chat_id=message.chat.id, document=content,
                                  visible_file_name=f"Стоимость образования в {university}.xlsx")
            elif university in ["ВГУ", "Борисоглебский Филиал ВГУ", "ОГИК"]:
                path = pathlib.Path("data", city, university, "Стоимость образования.pdf")
                with open(path, "rb") as file:
                    content = file.read()
                bot.send_message(chat_id=message.chat.id, text="Отправляю документ...")
                bot.send_document(chat_id=message.chat.id, document=content,
                                  visible_file_name=f"Стоимость образования в {university}.pdf")
        except Exception as ex:
            bot.send_message(chat_id=message.chat.id,
                             text="Прости, но я тебя не понимаю.\nВозможно ты ввел что-то не то...")

    @bot.message_handler(func=lambda mess: True if "Вступительные испытания в" in mess.text else False)
    def choose_section_exam(message):
        try:
            university = message.text.replace("Вступительные испытания в ", "")
            city = university_to_city_dict[university]
            path = pathlib.Path("data", city, university, "Вступительные испытания", "info.txt")
            with open(path, "rb") as file:
                content = file.read()
            bot.send_message(chat_id=message.chat.id, text="Отправляю документ...")
            bot.send_document(chat_id=message.chat.id, document=content,
                              visible_file_name=f"Вступительные испытания-{university}.txt")
        except Exception as ex:
            bot.send_message(chat_id=message.chat.id,
                             text="Прости, но я тебя не понимаю.\nВозможно ты ввел что-то не то...")

    @bot.message_handler(func=is_correct_exam)
    def choose_exam(message):
        try:
            university = university_index[message.text[2]]
            city = university_to_city_dict[university]
            exam = exams[message.text[3:]]
            file_name = f"{exam}.pdf"
            path = pathlib.Path("data", city, university, "Вступительные испытания", file_name)
            with open(path, "rb") as file:
                content = file.read()
            bot.send_message(chat_id=message.chat.id, text="Отправляю документ...")
            bot.send_document(chat_id=message.chat.id, document=content, visible_file_name=file_name)
        except Exception as ex:
            bot.send_message(chat_id=message.chat.id,
                             text="Прости, но я тебя не понимаю.\nВозможно ты ввел что-то не то...")

# Невалидные сообщения==================================================================================================

    @bot.message_handler(func=lambda mess: True)
    def invalid_message(message):
        bot.send_message(chat_id=message.chat.id, text="Прости, но я тебя не понимаю.\nВозможно ты ввел что-то не то...")

    bot.polling(none_stop=True, non_stop=True)


if __name__ == "__main__":
    print("[INFO] Бот запущен...")
    while True:
        try:
            run_bot(token="5812345429:AAGswfvjP2pW4KFY0tiM-Q8K30i0wZNDUOY")
        except Exception as ex:
            print(f"[ERROR] {ex}")
            continue
